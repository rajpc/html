public class CompanyDescriptionController {

    public Account acc { get; set; } 
    public Account_Planning__c accPlan { get; set; } 
    public List<TaskWrapper> taskList { get; set; }
    public Integer rowIndex { get; set; }
    
    public CompanyDescriptionController(ApexPages.StandardController stdController) {
        stdController.addFields(new List<String>{
            'Tier_level__c', 'Top_Prospect__c', 'Top_Client__c',
            'Primary_NAICS__c', 'Primary_NAICS_Description__c', 'ABL__c',
            'Business_Description__c'
        });
        this.acc = (Account)stdController.getRecord();
        
        List<Account_Planning__c> existingPlans = [
            SELECT Id, Tier_level__c, Top_Prospect__c, Top_Client__c,
                   Primary_NAICS__c, Primary_NAICS_Description__c, ABL__c,
                   Ownership__c, Business_Description__c, Strategic_Opportunity__c
            FROM Account_Planning__c
            WHERE Account__c = :acc.Id
            ORDER BY CreatedDate DESC
            LIMIT 1
        ];

        if (!existingPlans.isEmpty()) {
            this.accPlan = existingPlans[0];
        } else {
            this.accPlan = new Account_Planning__c();
            this.accPlan.Tier_level__c = acc.Tier_level__c;
            this.accPlan.Top_Prospect__c = acc.Top_Prospect__c;
            this.accPlan.Top_Client__c = acc.Top_Client__c;
            this.accPlan.Primary_NAICS__c = acc.Primary_NAICS__c;
            this.accPlan.Primary_NAICS_Description__c = acc.Primary_NAICS_Description__c;
            this.accPlan.ABL__c = acc.ABL__c;
            this.accPlan.Business_Description__c = acc.Business_Description__c;
        }
        
        this.taskList = new List<TaskWrapper>();
    }

    public void saveAccountDetails() {
        if (acc.Id == null) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'An Account ID is required to save.'));
            return;
        }
        try {
            accPlan.Account__c = acc.Id;
            acc.Business_Description__c = accPlan.Business_Description__c;

            upsert accPlan; 
            update acc;

            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.CONFIRM, 'Account Plan was saved successfully.'));
        } catch (DmlException e) {
            ApexPages.addMessages(e);
        }
    }

    public PageReference openPDF() {
        // MODIFIED: Corrected the page name reference
        PageReference pdfPage = Page.CompanyDescriptionView;
        pdfPage.getParameters().put('id', acc.Id);
        pdfPage.setRedirect(true);
        return pdfPage;
    }
    
    public void saveRow() {
        if (rowIndex != null && rowIndex < taskList.size()) {
            TaskWrapper wrapper = taskList.get(rowIndex);
            Date startDate = Date.newInstance(2025, 9, 25);
            Date endDate = Date.newInstance(2025, 10, 5);
            Date dueDate = wrapper.taskRec.ActivityDate;
            if (dueDate != null && (dueDate <= startDate || dueDate >= endDate)) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Outside the valid Account Planning Period'));
                taskList.remove(rowIndex);
                return; 
            }
            if (String.isBlank(wrapper.taskRec.Subject) || 
                String.isBlank(wrapper.taskRec.Description) || 
                dueDate == null) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Subject, Description, and Date are all required.'));
                return;
            }
            wrapper.taskRec.WhatId = acc.Id;
            try {
                upsert wrapper.taskRec;
                wrapper.isEditMode = false;
            } catch (DmlException e) {
                ApexPages.addMessages(e);
            }
        }
    }
    public void addRow() {
        if (taskList.size() < 5) {
            taskList.add(new TaskWrapper(taskList.size()));
        }
    }
    public void editRow() {
        if (rowIndex != null && rowIndex < taskList.size()) {
            taskList.get(rowIndex).isEditMode = true;
        }
    }
    public Boolean getIsAddDisabled() {
        return taskList.size() >= 5;
    }
    public class TaskWrapper {
        public Task taskRec { get; set; }
        public Boolean isEditMode { get; set; }
        public Integer rowIndex { get; set; }
        public TaskWrapper(Integer index) {
            this.taskRec = new Task();
            this.isEditMode = true;
            this.rowIndex = index;
        }
    }
}
