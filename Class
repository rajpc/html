public class CompanyDescriptionController {

    public Account acc { get; set; } 
    public Account_Planning__c accPlan { get; set; } 
    public List<TaskWrapper> taskList { get; set; }
    public Integer rowIndex { get; set; }
    
    private AccountPlanning_Period__c currentPeriod;
    public Date planningPeriodStartDate { get; set; }
    public Date planningPeriodEndDate { get; set; }
    public Boolean isPeriodActive { get; private set; }
    private Id taskRecordTypeId;
    
    public CompanyDescriptionController(ApexPages.StandardController stdController) {
        this.isPeriodActive = false;
        stdController.addFields(new List<String>{'Tier_Level__c', 'Business_Description__c', 'OwnerId'});
        this.acc = (Account)stdController.getRecord();
        
        //taskRecordTypeId = Schema.SObjectType.Task.getSObjectSubtypeInfosByDeveloperName().get('Task').getRecordTypeId();
        
        Date today = Date.today();
        List<AccountPlanning_Period__c> periods = [
            SELECT Name, startdate__c, enddate__c 
            FROM AccountPlanning_Period__c 
            WHERE startdate__c <= :today AND enddate__c >= :today 
            LIMIT 1
        ];
        
        if(!periods.isEmpty()){
            this.isPeriodActive = true;
            currentPeriod = periods[0];
            planningPeriodStartDate = currentPeriod.startdate__c;
            planningPeriodEndDate = currentPeriod.enddate__c;

            List<Account_Planning__c> existingPlans = [
                SELECT Id, Tier__c, Top_Prospect__c, Top_Client__c, Name2__c, Account_Planning_Period__c,
                       Primary_NAICS__c, Primary_NAICS_Description__c, ABL__c,
                       Ownership__c, Business_Description__c, Strategic_Opportunity__c
                FROM Account_Planning__c
                WHERE Account__c = :acc.Id AND Account_Planning_Period__c = :currentPeriod.Id
                LIMIT 1
            ];

            if (!existingPlans.isEmpty()) {
                this.accPlan = existingPlans[0];
                this.accPlan.Business_Description__c = acc.Business_Description__c;
                
                this.taskList = new List<TaskWrapper>();
                
                // This query must select Subject, Description, and ActivityDate to display them on the page.
                List<Task> relatedTasks = [
                    SELECT Subject, Description, ActivityDate 
                    FROM Task 
                    WHERE WhatId = :accPlan.Id 
                    AND ActivityDate >= :planningPeriodStartDate 
                    AND ActivityDate <= :planningPeriodEndDate
                ];
                for (Task t : relatedTasks) {
                    TaskWrapper wrapper = new TaskWrapper(taskList.size());
                    wrapper.taskRec = t;
                    wrapper.isEditMode = false; 
                    this.taskList.add(wrapper);
                }

            } else {
                this.accPlan = new Account_Planning__c();
                this.accPlan.Tier__c = acc.Tier_Level__c;
                this.accPlan.Business_Description__c = acc.Business_Description__c;
                this.taskList = new List<TaskWrapper>();
            }
        } else {
            this.accPlan = new Account_Planning__c();
            this.taskList = new List<TaskWrapper>();
        }
    }

    public void saveAccountDetails() {
        if (!isPeriodActive) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Cannot save: There is no active Account Planning Period.'));
            return;
        }
        try {
            if (accPlan.Id == null) {
                accPlan.Name2__c = currentPeriod.Name;
            }
            accPlan.Account_Planning_Period__c = currentPeriod.Id;
            accPlan.Account__c = acc.Id;
            acc.Business_Description__c = accPlan.Business_Description__c;
            upsert accPlan; 
            update acc;
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.CONFIRM, 'Account Plan was saved successfully.'));
        } catch (DmlException e) {
            ApexPages.addMessages(e);
        }
    }

    public PageReference openPDF() {
        PageReference pdfPage = Page.CompanyDescriptionView;
        pdfPage.getParameters().put('id', acc.Id);
        pdfPage.setRedirect(true);
        return pdfPage;
    }
    
    public void saveRow() {
        if (rowIndex != null && rowIndex < taskList.size()) {
            TaskWrapper wrapper = taskList.get(rowIndex);
            if (!isPeriodActive) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Cannot save task: There is no active Account Planning Period.'));
                return;
            }
            wrapper.taskRec.WhatId = accPlan.Id;
            wrapper.taskRec.OwnerId = acc.OwnerId;
            wrapper.taskRec.Status = 'Open';
            //wrapper.taskRec.RecordTypeId = taskRecordTypeId;
            wrapper.taskRec.Type = 'Account Planning';
            Date dueDate = wrapper.taskRec.ActivityDate;
            if (dueDate != null && (dueDate < planningPeriodStartDate || dueDate > planningPeriodEndDate)) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Due Date must be within the active planning period (' + planningPeriodStartDate.format() + ' to ' + planningPeriodEndDate.format() + ').'));
                return;
            }
            if (String.isBlank(wrapper.taskRec.Subject) || 
                String.isBlank(wrapper.taskRec.Description) || 
                dueDate == null) {
                ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Subject, Description, and Date are all required.'));
                return;
            }
            try {
                upsert wrapper.taskRec;
                wrapper.isEditMode = false;
            } catch (DmlException e) {
                ApexPages.addMessages(e);
            }
        }
    }

    public Boolean getIsActionPlanDisabled() {
        return accPlan.Id == null; 
    }

    public void addRow() {
        if (taskList.size() < 5) {
            taskList.add(new TaskWrapper(taskList.size()));
        }
    }
    public void editRow() {
        if (rowIndex != null && rowIndex < taskList.size()) {
            taskList.get(rowIndex).isEditMode = true;
        }
    }
    public Boolean getIsAddDisabled() {
        return taskList.size() >= 5;
    }
    public class TaskWrapper {
        public Task taskRec { get; set; }
        public Boolean isEditMode { get; set; }
        public Integer rowIndex { get; set; }
        public TaskWrapper(Integer index) {
            this.taskRec = new Task();
            this.isEditMode = true;
            this.rowIndex = index;
        }
    }
}
