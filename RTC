public with sharing class RelationshipTeamController {
    
    public List<AccountTeamMember> coreTeam { get; private set; }
    public Map<String, List<AccountTeamMember>> investmentBankingTeamByRole { get; private set; }
    
    // A map to hold the display labels for each role
    public Map<String, String> roleDisplayLabels { get; private set; }

    private String currentRecordId;

    public RelationshipTeamController(ApexPages.StandardController controller) {
        this.currentRecordId = controller.getId();
        initializeCollections();
        loadTeamMembers();
    }

    public List<String> getInvestmentBankingRoles() {
        if (investmentBankingTeamByRole == null) {
            return new List<String>();
        }
        List<String> roles = new List<String>(investmentBankingTeamByRole.keySet());
        roles.sort();
        return roles;
    }

    private void initializeCollections() {
        coreTeam = new List<AccountTeamMember>();
        investmentBankingTeamByRole = new Map<String, List<AccountTeamMember>>();
        
        // This map remains the same
        roleDisplayLabels = new Map<String, String> {
            'Assigned CSO' => 'CSO',
            'Treasury' => 'TSO',
            'TS - TSA (Treasury Solutions Associate)' => 'TSA',
            'PCA' => 'PB',
            'IB' => 'IB',
            'IB - M&A' => 'IB - M&A',
            'IB - Syndications' => 'IB - Syndications',
            'IB - Sponsorship' => 'IB - Sponsor Coverage',
            'IB - ABL Credit' => 'IB - ABL Credit',
            'IB - ABL' => 'IB - ABL',
            'IB - Capital Solutions' => 'IB - Capital Solutions',
            'IB - Coverage' => 'IB - Coverage',
            'IB - EFL' => 'IB - EFL',
            'IB - ETF' => 'IB - ETF',
            'IB - Leveraged Finance' => 'IB - Leveraged Finance',
            'IB - Operations' => 'IB - Operations',
            'IB - Public Finance' => 'IB - Public Finance',
            'IB - Sales & Trading' => 'IB - Sales & Trading'
        };
    }

    private void loadTeamMembers() {
        if (this.currentRecordId == null) return;
        
        Set<String> coreRoles = new Set<String>{'Assigned CSO', 'Treasury', 'TS - TSA (Treasury Solutions Associate)', 'PCA'};

        List<AccountTeamMember> allMembers = [
            SELECT User.Name, TeamMemberRole 
            FROM AccountTeamMember 
            WHERE AccountID = :this.currentRecordId 
            AND TeamMemberRole IN :roleDisplayLabels.keySet()
            ORDER BY User.Name ASC
        ];
        
        for (AccountTeamMember member : allMembers) {
            if (coreRoles.contains(member.TeamMemberRole)) {
                coreTeam.add(member);
            } else {
                String role = member.TeamMemberRole;
                
                // If the role isn't in our map yet, create a new list for it
                if (!investmentBankingTeamByRole.containsKey(role)) {
                    investmentBankingTeamByRole.put(role, new List<AccountTeamMember>());
                }
                
                // Add the current member to the list for their role
                investmentBankingTeamByRole.get(role).add(member);
            }
        }
    }
}
